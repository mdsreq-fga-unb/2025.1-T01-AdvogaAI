generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String   
  phone       String?
  oab         String?  @unique
  role        String   @default("USER")
  isConfirmed Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clientesPessoaFisica  PessoaFisica[]
  clientesPessoaJuridica PessoaJuridica[]
  modelosDocumento ModeloDocumento[]
  DocumentoGerado DocumentoGerado[]
  processos Processo[]

  @@map("users")
}

enum EstadoCivil {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
  UNIAO_ESTAVEL
}

model PessoaFisica {
  id              String   @id @default(uuid())
  nomeCompleto    String
  cpf             String?   @db.VarChar(14)
  rg              String   
  ctps            String?  
  nacionalidade   String
  email           String   
  telefone        String
  estadoCivil     EstadoCivil
  profissao       String

  enderecoId      String    @unique
  endereco   Endereco @relation(fields: [enderecoId], references: [id], onDelete: Cascade)

  userId          String
  user            User        @relation(fields: [userId], references: [id])


  empresasRepresentadas PessoaJuridica[] @relation("RepresentanteLegalEmpresa")

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("pessoas_fisicas")
}

model PessoaJuridica {
  id           String  @id @default(uuid())
  razaoSocial  String
  nomeFantasia String?
  cnpj         String  @unique @db.VarChar(14)
  tipoEmpresa  String 
  email        String  @unique
  telefone     String

  enderecoId   String  @unique
  endereco     Endereco @relation(fields: [enderecoId], references: [id], onDelete: Cascade)


  representanteLegalId String
  representanteLegal   PessoaFisica @relation("RepresentanteLegalEmpresa", fields: [representanteLegalId], references: [id])
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("pessoas_juridicas")
}

model Endereco {
  id          String  @id @default(uuid())
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String  @db.Char(2)
  cep         String  @db.VarChar(8)

  pessoaFisica   PessoaFisica?
  pessoaJuridica PessoaJuridica?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("enderecos")
}

model ModeloDocumento {
  id        String   @id @default(uuid())
  nome      String   
  tipo_documento String   @default("OUTRO")
  descricao String?
  url String   

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tagsDoSistema CampoModeloDocumento[]

  camposPersonalizados CampoPersonalizado[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("modelos_documentos")
}

model DocumentoGerado {
  id        String   @id @default(uuid())
  nome      String   
  tipo_documento String   @default("OUTRO")
  descricao String?
  url String   

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documento_gerado")
}

model TagSistema {
  id            Int      @id @default(autoincrement())
  chave         String   @unique 
  descricao     String   
  origemDados   String   

  modelosQueUsam CampoModeloDocumento[]

  @@map("tags_sistema")
}

model CampoModeloDocumento {
  modeloDocumentoId String
  tagSistemaId      Int

  modeloDocumento ModeloDocumento @relation(fields: [modeloDocumentoId], references: [id], onDelete: Cascade)
  tagSistema      TagSistema      @relation(fields: [tagSistemaId], references: [id], onDelete: Cascade)


  @@id([modeloDocumentoId, tagSistemaId])
  @@map("campos_modelo_documento")
}

model CampoPersonalizado {
  id        String   @id @default(uuid())
  chave     String   
  descricao String  
  tipoDado  String   @default("STRING") 

  modeloDocumentoId String
  modeloDocumento   ModeloDocumento @relation(fields: [modeloDocumentoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("campos_personalizados")
}

model Processo {
  id                  String   @id @default(uuid())
  siglaTribunal       String   // Sigla do tribunal (ex: "TRT10")
  numeroProcesso      String   @unique // Número do processo (ex: "00009753020245100017")
  nomeClasse          String   // Nome da classe (ex: "Ação Trabalhista - Rito Ordinário")

  userId              String   // Relacionamento com o advogado (usuário)
  user                User     @relation(fields: [userId], references: [id])

  movimentacoes       Movimentacao[]

  createdAt            DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Movimentacao {
  id                    String   @id @default(uuid())
  dataDisponibilizacao  DateTime // Data de disponibilização da comunicação
  tipoComunicacao       String   // Tipo de comunicação (ex: "Intimação")
  nomeOrgao             String   // Nome do órgão (ex: "17ª Vara do Trabalho de Brasília - DF")
  texto                 String   // Texto da comunicação
  tipoDocumento         String   // Tipo do documento (ex: "Notificação")
  meiocompleto          String   // Meio completo (ex: "Diário de Justiça Eletrônico Nacional")

  prazoResposta         DateTime // Prazo de resposta (data de disponibilização + 5 dias)

  numeroComunicacao    String   @unique

  processoId            String   // Relacionamento com o processo
  processo              Processo @relation(fields: [processoId], references: [id])

  createdAt              DateTime @default(now())
  updatedAt          DateTime @updatedAt
}